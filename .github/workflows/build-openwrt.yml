#========================================================================================================================
# https://github.com/ophub/amlogic-s9xxx-openwrt
# Description: Automatically Build OpenWrt for Amlogic S9xxx STB
# Function: Workflows for Build Amlogic S9xxx STB
# Cron: min (0 - 59) / hour (0 - 23) / day of month (1 - 31) / month (1 - 12) / day of week (0 - 6)(Sunday - Saturday)
# Copyright (C) 2020 https://github.com/P3TERX/Actions-OpenWrt
# Copyright (C) 2020 https://github.com/ophub/amlogic-s9xxx-openwrt
#========================================================================================================================

name: Build OpenWrt

on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      ssh:
        description: 'SSH connection to Actions'
        required: false
        default: 'false'
  # schedule:
  #   - cron: '0 17 * * *'

env:
  REPO_URL: https://github.com/coolsnowwolf/lede
  REPO_BRANCH: master
  FEEDS_CONF: router_config/feeds.conf.default
  CONFIG_FILE: router_config/.config
  DIY_P1_SH: router_config/diy-part1.sh
  DIY_P2_SH: router_config/diy-part2.sh
  UPLOAD_BIN_DIR: true
  UPLOAD_ARMVIRT: false
  UPLOAD_FIRMWARE: true
  UPLOAD_RELEASE: true
  UPLOAD_COWTRANSFER: false
  UPLOAD_WETRANSFER: false
  DELETE_RELEASE: true
  DELETE_ARTIFACTS: true
  KEEP_DAY: 3
  KEEP_MININUM_RUNS: 0
  KEEP_MININUM_RELEASE: 3
  RECENT_LASTEST: 3
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-18.04
    if: github.event.repository.owner.id == github.event.sender.id

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install $(curl -fsSL git.io/depends-ubuntu-1804)
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir
        echo "COMPILE_STARTINGTIME=$(date +"%Y.%m.%d.%H%M")" >> $GITHUB_ENV

    - name: Clone source code
      working-directory: /workdir
      run: |
        df -hT $PWD
        git clone --depth 1 $REPO_URL -b $REPO_BRANCH openwrt
        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt

    - name: Load custom feeds
      run: |
        [ -e $FEEDS_CONF ] && mv $FEEDS_CONF openwrt/feeds.conf.default
        chmod +x $DIY_P1_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P1_SH
    
    - name: Update clean
      run: cd openwrt && ./scripts/feeds clean

    - name: Update feeds
      run: cd openwrt && ./scripts/feeds update -a

    - name: Install feeds
      run: cd openwrt && ./scripts/feeds install -a

    - name: Load custom configuration
      run: |
        [ -e files ] && mv files openwrt/files
        [ -e $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config
        chmod +x $DIY_P2_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P2_SH

    - name: Download package
      id: package
      run: |
        cd openwrt
        make defconfig
        make download -j8
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;

    - name: SSH connection to Actions @ Ctrl+C to enter, Ctrl+D to exit
      uses: P3TERX/ssh2actions@main
      if: (github.event.inputs.ssh == 'true' && github.event.inputs.ssh  != 'false') || contains(github.event.action, 'ssh')
      env:
        TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}

    - name: Compile the firmware
      id: compile
      run: |
        cd openwrt
        echo -e "$(nproc) thread compile"
        make -j$(nproc) || make -j1 || make -j1 V=s
        grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
        [ -s DEVICE_NAME ] && echo "DEVICE_NAME=$(cat DEVICE_NAME)" >> $GITHUB_ENV
        echo "FILE_DATE=$(date +"%Y.%m.%d.%H%M")" >> $GITHUB_ENV
        echo "::set-output name=status::success"

    - name: Check space usage
      if: (!cancelled())
      run: df -hT

    - name: Upload OpenWrt bin directory to Actions
      uses: actions/upload-artifact@v2
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true'
      with:
        name: openwrt_bin_armvirt_64_${{ env.FILE_DATE }}
        path: openwrt/bin
        retention-days: ${{ env.RECENT_LASTEST }}
        if-no-files-found: ignore

    - name: Organize armvirt files
      id: organize
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_ARMVIRT == 'true' && !cancelled()
      run: |
        cd openwrt/bin/targets/*/*
        rm -rf packages
        echo "TMPFILEPATH=$PWD" >> $GITHUB_ENV
        echo "::set-output name=status::success"

    - name: Upload armvirt directory to Actions
      uses: actions/upload-artifact@v2
      if: steps.organize.outputs.status == 'success' && env.UPLOAD_ARMVIRT == 'true' && !cancelled()
      with:
        name: openwrt_armvirt_64_${{ env.FILE_DATE }}
        path: ${{ env.TMPFILEPATH }}
        retention-days: ${{ env.RECENT_LASTEST }}
        if-no-files-found: ignore

    - name: Build OpenWrt firmware
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_FIRMWARE == 'true' && !cancelled()
      id: build
      run: |
        [ -d openwrt-armvirt ] || mkdir -p openwrt-armvirt
        cp -f openwrt/bin/targets/*/*/*.tar.gz openwrt-armvirt/ && sync
        sudo rm -rf openwrt && sync
        sudo rm -rf /workdir && sync
        sudo chmod +x make
        sudo ./make -d -b s905d -k 5.4.105
        cd out/ && sudo gzip *.img
        cp -f ../openwrt-armvirt/*.tar.gz . && sync
        echo "FILEPATH=$PWD" >> $GITHUB_ENV
        echo "::set-output name=status::success"

    - name: Upload artifact to Actions
      uses: kittaakos/upload-artifact-as-is@master
      if: steps.build.outputs.status == 'success' && env.UPLOAD_FIRMWARE == 'true' && !cancelled()
      with:
        path: ${{ env.FILEPATH }}/

    - name: Upload OpenWrt Firmware to cowtransfer
      if: steps.build.outputs.status == 'success' && env.UPLOAD_COWTRANSFER == 'true' && !cancelled()
      run: |
        curl -fsSL git.io/file-transfer | sh
        ./transfer cow --block 2621440 -s -p 64 --no-progress ${{ env.FILEPATH }}/{openwrt_s9xxx_*,openwrt_n1_*} 2>&1 | tee cowtransfer.log
        echo "COW_URL=$(cat cowtransfer.log | grep https | cut -f3 -d" ")" >> $GITHUB_ENV

    - name: Upload OpenWrt Firmware to WeTransfer
      if: steps.build.outputs.status == 'success' && env.UPLOAD_WETRANSFER == 'true' && !cancelled()
      run: |
        curl -fsSL git.io/file-transfer | sh
        ./transfer wet -s -p 16 --no-progress ${{ env.FILEPATH }}/{openwrt_s9xxx_*,openwrt_n1_*} 2>&1 | tee wetransfer.log
        echo "WET_URL=$(cat wetransfer.log | grep https | cut -f3 -d" ")" >> $GITHUB_ENV

    - name: Upload OpenWrt Firmware to Release
      uses: softprops/action-gh-release@v1
      if: steps.build.outputs.status == 'success' && env.UPLOAD_RELEASE == 'true' && !cancelled()
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: openwrt_s9xxx_${{ env.FILE_DATE }}
        files: ${{ env.FILEPATH }}/*
        body: |
          This is OpenWrt firmware for Amlogic S9xxx STB
          * Firmware information
          Default IP: 192.168.1.2
          Default username: root
          Default password: password
          Default WIFI name: OpenWrt
          Default WIFI password: none
          Install command: openwrt-install
          Update command: openwrt-update

    - name: Delete older releases
      uses: dev-drprasad/delete-older-releases@master
      if: env.DELETE_RELEASE == 'true'
      with:
        keep_latest: ${{ env.KEEP_MININUM_RELEASE }}
        delete_tags: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Delete older workflow runs and artifacts
      uses: Mattraks/delete-workflow-runs@main
      if: env.DELETE_ARTIFACTS == 'true'
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        repository: ${{ github.repository }}
        retain_days: ${{ env.KEEP_DAY }}
        keep_minimum_runs: ${{ env.KEEP_MININUM_RUNS }}

